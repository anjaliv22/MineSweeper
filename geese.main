**Due to Ploicy 71 of the University of Waterloo, all code file cannot be released
#include "geesespotter_lib.h"
#include <iostream>

char *create_board(std::size_t x_dim, std::size_t y_dim)
{
    //create dynamic array 
    char *board{new char[x_dim*y_dim]{}};
    for(int i{0}; i <= (x_dim*y_dim); i++)
    {
        board[i] = 0;
    }
    return board;
}

void clean_board(char *board)
{
    delete[] board;
}

void print_board(char *board, std::size_t x_dim, std::size_t y_dim)
{
    int counter{0};
    for(int i{0}; i<y_dim; i++)
    //loops through the y values of the grid
    {
        //start new line when row is done
        for(int j{0}; j<x_dim; j++)
        //loops through the x values of the grid
        {
            if((board[counter] & marked_mask()) == marked_mask())
            {
                std::cout<<"M";
            }
            else if((board[counter] & hidden_mask()) == hidden_mask())
            {
                std::cout<<"*";
            }
            //if((board[i] & value_mask()) == value_mask())
            else
            {
                std::cout<<(board[counter]&value_mask());
            }
            counter++; 
        }
         std::cout<<std::endl;
    }

}

void hide_board(char *board, std::size_t x_dim, std::size_t y_dim)
{
    for(int i{0}; i<(x_dim*y_dim);i++)
    {
        board[i] |= hidden_mask();
    }
}

int mark(char *board, std::size_t x_dim, std::size_t y_dim, std::size_t x_loc, std::size_t y_loc)
{
    std::size_t index{x_loc + (x_dim*y_loc)};
    if((board[index] & hidden_mask()) != hidden_mask()){
        return 2;
    }
    
        board[index] ^= marked_mask();
        return 0;
    
}
int index(std::size_t x, std::size_t y, std::size_t x_dim, std::size_t y_dim)
{
    std::size_t index{x + (x_dim*y)};
    return index;
}

void compute_neighbours(char * board, std::size_t x_dim, std::size_t y_dim)
{
    //counter counts the amount of geese in each spot
    int counter{};
    for(int i{0}; i <y_dim; i++)
    {
        //cycles through the y coordinates
        for(int j{0}; j< x_dim; j++)
        //cycles through the x coordinates
        {
            int num{index(j, i, x_dim, y_dim)};
            if((board[num]&value_mask())!=9)
            //checks if the value at index() is not 9
            {
                //check if the value beside is 9
                if(i==0)
                {//top row
                    if(j==0)
                    {//side col
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                    }
                    else if(j == (x_dim-1))
                    {//last col
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                    }
                    else
                    {//middle col
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;                           
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;                            
                        }
                        if((board[num+(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;                            
                        }
                    }
                }
                else if(i == (y_dim-1))
                {//bottom row
                    if(j==0)
                    {//side col
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                    }
                    else if(j == (x_dim-1))
                    {//last col
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                    }
                    else
                    {//middle col
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim-1)]&value_mask())== 9)
                        {
                           counter++;
                        }
                    }

                }
                else
                {//middle rows
                    if(j == 0)
                    {//side col
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        
                    }
                    else if(j == (x_dim-1))
                    {//last col
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                    }
                    else
                    {//middle col
                        if((board[num-1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+1]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num-(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim-1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+x_dim]&value_mask())== 9)
                        {
                            counter++;
                        }
                        if((board[num+(x_dim+1)]&value_mask())== 9)
                        {
                            counter++;
                        }
                       
                    }
                }
                board[num] = counter;
                //std::cout<<(board[num]&value_mask());
                //std::cout<<counter;
            }
            counter = 0;
        }
        //std::cout<<std::endl;
    }
}
bool is_game_won(char * board, std::size_t x_dim, std::size_t y_dim){
    int geese{0};
    int revealed{0};
    //The game is won when all fields that do not have a goose have been revealed
    for(int i{0}; i<(x_dim*y_dim); i++)
    {
        if((board[i] & hidden_mask()) != hidden_mask())
        {//if its revealed
            revealed++;
        }
        if((board[i]&value_mask()) == 9)
        {
            geese++;
        }
    }
    if(geese == (x_dim*y_dim))
    {
        return true;
    }
    else if(revealed == ((x_dim*y_dim)-geese))
    {
        return true;
    }
    else{
        return false;
    }
}
int reveal(char * board, std::size_t x_dim, std::size_t y_dim, std::size_t x_loc, std::size_t y_loc){
    //takes in an x and y location and then reveals the position
    int num{index(x_loc, y_loc, x_dim, y_dim)};
    if((board[num]&marked_mask()) == marked_mask())
    {
        return 1;
    }
    else if((board[num]&hidden_mask())!=hidden_mask())
    {
        return 2; 
    }
    else{
        board[num]&= value_mask();
        if((board[num]&value_mask()) == 9)
        {
            return 9;
        }
    if((board[num]&value_mask()) == 0)
    {
        board[num]&= value_mask();

        if(y_loc == 0)
        {
            if(x_loc == 0)
            {
                board[num+1] &= value_mask();
                board[num+x_dim]&=value_mask();
                board[num+(x_dim+1)]&=value_mask();
            }
            else if(x_loc == (x_dim-1))
            {
                board[num-1]&=value_mask();
                board[num+(x_dim-1)]&=value_mask();
                board[num+x_dim]&=value_mask();
            }
            else
            {
                board[num-1]&=value_mask();
                board[num+1]&=value_mask();
                board[num+(x_dim-1)]&=value_mask();
                board[num+x_dim]&=value_mask();
                board[num+(x_dim+1)]&=value_mask();
            }
        }
        else if (y_loc == (y_dim -1))
        {
            if(x_loc == 0)
            {
                board[num+1]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim-1)]&=value_mask();
            }
            else if(x_loc == (x_dim-1))
            {
                board[num-1]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim+1)]&=value_mask();
            }
            else
            {
                board[num+1]&=value_mask();
                board[num-1]&=value_mask();
                board[num-(x_dim+1)]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim-1)]&=value_mask();
            }
        }
        else
        {
            if(x_loc == 0)
            {
                board[num+1]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim-1)]&=value_mask();
                board[num+(x_dim+1)]&=value_mask();
                board[num+x_dim]&=value_mask();
            }
            else if(x_loc == (x_dim-1))
            {
                board[num-1]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim+1)]&=value_mask();
                board[num+(x_dim-1)]&=value_mask();
                board[num+x_dim]&=value_mask();
            }
            else
            {
                board[num+1]&=value_mask();
                board[num-1]&=value_mask();
                board[num+x_dim]&=value_mask();
                board[num+(x_dim-1)]&=value_mask();
                board[num+(x_dim+1)]&=value_mask();
                board[num-x_dim]&=value_mask();
                board[num-(x_dim+1)]&=value_mask();
                board[num-(x_dim-1)]&=value_mask();
            }
        }
        return 0;
    }
    }
    return 0; 
   
}
